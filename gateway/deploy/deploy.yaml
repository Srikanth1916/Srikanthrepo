apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spring-cloud-gateway
rules:
  - apiGroups:
      - '*'
    resources:
      - services
      - endpoints
      - pods
      - ingresses
    verbs:
      - get
      - watch
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-clusterrole-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spring-cloud-gateway
subjects:
  - kind: ServiceAccount
    name: skyhive
    namespace: skyhive
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: gateway
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:ca-central-1:596298976885:certificate/3c4256a1-973f-4af1-8fed-24b845a2f755
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "120"
  labels:
    app: gateway
    service: gateway
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8080
      name: http
    - port: 443
      targetPort: 8080
      name: https
  selector:
    app: gateway
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  labels:
    app: gateway
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
      version: v1
  template:
    metadata:
      labels:
        app: gateway
        version: v1
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: skyhive
      containers:
        - name: gateway
          image: 596298976885.dkr.ecr.ca-central-1.amazonaws.com/gateway:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          securityContext:
            runAsUser: 1000
