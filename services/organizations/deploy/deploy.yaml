# Service
apiVersion: v1
kind: Service
metadata:
  name: organizations
  labels:
    app: organizations
    service: organizations
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app: organizations
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: organizations
  labels:
    app: organizations
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: organizations
      version: v1
  template:
    metadata:
      labels:
        app: organizations
        version: v1
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: skyhive
      containers:
        - name: organizations
          image: 157506822563.dkr.ecr.us-east-2.amazonaws.com/organizations
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
#          readinessProbe:
#            httpGet:
#              path: /actuator/health/readiness
#              port: 8080
#            initialDelaySeconds: 30
#            periodSeconds: 10
#            timeoutSeconds: 3
#            failureThreshold: 1
#          livenessProbe:
#            httpGet:
#              path: /actuator/health/liveness
#              port: 8080
#            initialDelaySeconds: 60
#            periodSeconds: 10
#            timeoutSeconds: 3
#            failureThreshold: 1
          securityContext:
            runAsUser: 1000
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: organizations
  annotations:
    konghq.com/strip-path: "true"
spec:
  ingressClassName: kong
  rules:
    - http:
        paths:
          - path: /organizations/
            pathType: Prefix
            backend:
              service:
                name: organizations
                port:
                  number: 8080
---
---
# HPA configuration

apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: organizations
  annotations:
    metric-config.object.istio-requests-total.prometheus/per-replica: "true"
    metric-config.object.istio-requests-total.prometheus/query: |
      sum(
        rate(
          istio_requests_total{
            destination_workload="organizations",
            destination_workload_namespace="skyhive"
          }[1m]
        )
      ) /
      count(
        count(
          container_memory_usage_bytes{
            namespace="skyhive",
            pod=~"organizations.*"
          }
        ) by (pod)
      )
spec:
  maxReplicas: 10
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: organizations
  metrics:
    - type: Object
      object:
        metricName: istio-requests-total
        target:
          apiVersion: v1
          kind: Pod
          name: podinfo
        targetValue: 10
