name: 'facadapi-1'

on:
  workflow_dispatch

jobs:
  facadapi:
    name: 'facadapi process'
    runs-on: test
    env:
      ECR_URL:  157506822563.dkr.ecr.us-east-2.amazonaws.com
      AWS_REGION: us-east-2
      EKS_CLUSTERNAME: EKS-cluster
    defaults:
      run:
        shell: bash

    steps:
    - name: git repo Checkout
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Setup Java JDK
      uses: actions/setup-java@v2
      with:
        java-version: 17
        distribution: 'adopt'		
        cache: maven

    - name: Build the maven
      run:  |
         mvn clean install spring-boot:build-image

    - name: Zipping the project
      run: |
         zip -R facadeapi.zip '*.jar'
      env:
          build-name: $PROJECT.zip
          
    - name : Uploading the artifacts
      uses: actions/upload-artifact@v2
      with:
         name: CodePackage	     
         path: facadeapi.zip
    
  pipeline-scan:
    needs: facadapi
    runs-on: test
    container: 
      image: veracode/pipeline-scan:latest
      options: --user root # our normal luser doesn't have privs to write to github directories

    steps:
    - name: Retrieve artifact
      uses: actions/download-artifact@v2
      with:
        name: CodePackage
        path: /github/home
    
    #  Submit  project to pipeline scan
    - name: Pipeline Scan
      run: |
        cd /github/home
        java -Xmx4048m -jar /opt/veracode/pipeline-scan.jar --veracode_api_id="${{secrets.VERACODE_API_ID}}" --veracode_api_key="${{secrets.VERACODE_API_KEY}}" --fail_on_severity="Very High, High" --file="facadeapi.zip" --json_output_file="results.json"
      continue-on-error: true

    - uses: actions/upload-artifact@v2
      with:
        name: ScanResults
        path: /github/home/results.json

  # Convert pipeline scan output to SARIF format  
  process-results:
    needs: pipeline-scan
    runs-on: test
    steps:

    - name: Retrieve results
      uses: actions/download-artifact@v2
      with:
        name: ScanResults

    - name: convert
      uses: veracode/veracode-pipeline-scan-results-to-sarif@master
      with:
        pipeline-results-json: results.json
        output-results-sarif: veracode-results.sarif
        finding-rule-level: "4:3:0"
    - uses: github/codeql-action/upload-sarif@v1
      with:
    # Path to SARIF file relative to the root of the repository
        sarif_file: veracode-results.sarif
